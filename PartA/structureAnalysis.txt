Design and Model Analysis
===================================

Aptness of Model for Problem
----------------------------
In general the model reflects the structure of the scenario that it
attempts to simulate, with relative accurace balanced with simplicity;
every class corresponds either to physically relevant component in the
system, is a strategy, or is the mail generator -- which simulates an
exteral input. The model does have some deficits, however. These are
discussed below.

* Building Class:
Even though the simulation operates on a building and simulates
different sizes of building, there is no building class. Conceptually,
the simulation is only linked to mail operation through the concept
of the building that the simulation runs in -- the building is the
unifying concept. Indeed the simulation API accepts arguments specifying
parameters for a building, but the concept is never given concrete 
structure in a class. Given a choice of building parameters, a
Building class and BuildingFactory might be appropriate for the 
following reasons:
    - Rather than be concerned about integer arguments specifying
      building parameters, the Simualtion can simply accept a
      building to simulate mail with
    - Rather than store a large number of integer constants at the
      top level (under Simulation), they could be stored in
      relevant building subclasses to be generated by the Factory
    - Supporting additional commandline arguments is easier to
      both add and read with a factory

* Concurrency:
The Simulation does not model autonomous concurrency well. In fact all
actions by delivery bots are limited by the number of steps the mail
sorter has taken -- a bot can only take one step per step of the mail
sorter. Where in reality bots would presumably run without communication
with the sorter or each other, they are simulated as turn-based and
tethered to a machine somewhere in the building.

This generally undermines the accuracy of the simulation; if the measure
of the effectiveness of a bot is how many steps it takes, and the number
of steps a bot takes is a function of a machine that in reality it only
needs to wait for, then the number of steps simulated is uninformative.
In fact, the simulation often favours keeping the bots idle until all
mail has arrived (which may be valid in terms of efficiency), but given
the coupling of bot steps and sorting steps this is more complex to
engineer into a delivery strategy than it might be in other models.

* Logging/Reporting
The logging and printing logic is dispersed throughout the top level
Simulation method that governs the entire simulation. An improvement
would be to add a Logger that collects information as the simulation
runs and prints it at the end, so that the program is more extensible,
the Logger and Simulation are agnostic of one another and the logic is
separate.

Use of General Design Practices in Model
----------------------------------------
The Simulation makes good use of interfaces, particularly for
strategies.
